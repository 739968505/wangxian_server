package com.fy.boss.message;

import com.xuanzhi.tools.transport.*;
import java.nio.ByteBuffer;


/**
 * 消息工厂类，此工厂类是由MessageComplier自动生成，请不要手动修改。<br>
 * 版本号：null<br>
 * 各数据包的定义如下：<br><br>
 * <table border="0" cellpadding="0" cellspacing="1" width="100%" bgcolor="#000000" align="center">
 * <tr bgcolor="#00FFFF" align="center"><td>请求消息</td><td>类型</td><td>响应消息</td><td>类型</td><td>说明</td></tr> * <tr bgcolor="#FFFFFF" align="center"><td><a href='./PASSPORT_REGISTER_REQ.html'>PASSPORT_REGISTER_REQ</a></td><td>0x0000E000</td><td><a href='./PASSPORT_REGISTER_RES.html'>PASSPORT_REGISTER_RES</a></td><td>0x8000E000</td><td>注册一个通行证</td></tr>
 * <tr bgcolor="#FAFAFA" align="center"><td><a href='./PASSPORT_LOGIN_REQ.html'>PASSPORT_LOGIN_REQ</a></td><td>0x0000E001</td><td><a href='./PASSPORT_LOGIN_RES.html'>PASSPORT_LOGIN_RES</a></td><td>0x8000E001</td><td>登陆</td></tr>
 * <tr bgcolor="#FFFFFF" align="center"><td><a href='./PASSPORT_GET_REQ.html'>PASSPORT_GET_REQ</a></td><td>0x0000E002</td><td><a href='./PASSPORT_GET_RES.html'>PASSPORT_GET_RES</a></td><td>0x8000E002</td><td>登陆</td></tr>
 * <tr bgcolor="#FAFAFA" align="center"><td><a href='./PASSPORT_GET_REQ2.html'>PASSPORT_GET_REQ2</a></td><td>0x0000E003</td><td><a href='./PASSPORT_GET_RES2.html'>PASSPORT_GET_RES2</a></td><td>0x8000E003</td><td>登陆</td></tr>
 * <tr bgcolor="#FFFFFF" align="center"><td><a href='./PASSPORT_UPDATE_REQ.html'>PASSPORT_UPDATE_REQ</a></td><td>0x0000E004</td><td><a href='./PASSPORT_UPDATE_RES.html'>PASSPORT_UPDATE_RES</a></td><td>0x8000E004</td><td>登陆</td></tr>
 * <tr bgcolor="#FAFAFA" align="center"><td><a href='./QQ_LOGIN_VALIDATE_REQ.html'>QQ_LOGIN_VALIDATE_REQ</a></td><td>0x0000A001</td><td><a href='./QQ_LOGIN_VALIDATE_RES.html'>QQ_LOGIN_VALIDATE_RES</a></td><td>0x8000A001</td><td>登陆</td></tr>
 * <tr bgcolor="#FFFFFF" align="center"><td><a href='./QQ_SAVING_REQ.html'>QQ_SAVING_REQ</a></td><td>0x0000A002</td><td><a href='./QQ_SAVING_RES.html'>QQ_SAVING_RES</a></td><td>0x8000A002</td><td>QQ充值</td></tr>
 * <tr bgcolor="#FAFAFA" align="center"><td><a href='./UC_SAVING_REQ.html'>UC_SAVING_REQ</a></td><td>0x0000A003</td><td><a href='./UC_SAVING_RES.html'>UC_SAVING_RES</a></td><td>0x8000A003</td><td>UC充值</td></tr>
 * </table>
 */
public class BossMessageFactory extends AbstractMessageFactory {

	private static long sequnceNum = 0L;
	public synchronized static long nextSequnceNum(){
		sequnceNum ++;
		if(sequnceNum >= 0x7FFFFFFF){
			sequnceNum = 1L;
		}
		return sequnceNum;
	}

	protected static BossMessageFactory self;

	public static BossMessageFactory getInstance(){
		if(self != null){
			return self;
		}
		synchronized(BossMessageFactory.class){
			if(self != null) return self;
			self = new BossMessageFactory();
		}
		return self;
	}

	public Message newMessage(byte[] messageContent,int offset,int size)
		throws MessageFormatErrorException, ConnectionException,Exception {
		int len = (int)byteArrayToNumber(messageContent,offset,getNumOfByteForMessageLength());
		if(len != size)
			throw new MessageFormatErrorException("message length not match");
		int end = offset + size;
		offset += getNumOfByteForMessageLength();
		long type = byteArrayToNumber(messageContent,offset,4);
		offset += 4;
		long sn = byteArrayToNumber(messageContent,offset,4);
		offset += 4;

			if(type == 0x0000E000L){
					return new PASSPORT_REGISTER_REQ(sn,messageContent,offset,end - offset);
			}else if(type == 0x8000E000L){
					return new PASSPORT_REGISTER_RES(sn,messageContent,offset,end - offset);
			}else if(type == 0x0000E001L){
					return new PASSPORT_LOGIN_REQ(sn,messageContent,offset,end - offset);
			}else if(type == 0x8000E001L){
					return new PASSPORT_LOGIN_RES(sn,messageContent,offset,end - offset);
			}else if(type == 0x0000E002L){
					return new PASSPORT_GET_REQ(sn,messageContent,offset,end - offset);
			}else if(type == 0x8000E002L){
					return new PASSPORT_GET_RES(sn,messageContent,offset,end - offset);
			}else if(type == 0x0000E003L){
					return new PASSPORT_GET_REQ2(sn,messageContent,offset,end - offset);
			}else if(type == 0x8000E003L){
					return new PASSPORT_GET_RES2(sn,messageContent,offset,end - offset);
			}else if(type == 0x0000E004L){
					return new PASSPORT_UPDATE_REQ(sn,messageContent,offset,end - offset);
			}else if(type == 0x8000E004L){
					return new PASSPORT_UPDATE_RES(sn,messageContent,offset,end - offset);
			}else if(type == 0x0000A001L){
					return new QQ_LOGIN_VALIDATE_REQ(sn,messageContent,offset,end - offset);
			}else if(type == 0x8000A001L){
					return new QQ_LOGIN_VALIDATE_RES(sn,messageContent,offset,end - offset);
			}else if(type == 0x0000A002L){
					return new QQ_SAVING_REQ(sn,messageContent,offset,end - offset);
			}else if(type == 0x8000A002L){
					return new QQ_SAVING_RES(sn,messageContent,offset,end - offset);
			}else if(type == 0x0000A003L){
					return new UC_SAVING_REQ(sn,messageContent,offset,end - offset);
			}else if(type == 0x8000A003L){
					return new UC_SAVING_RES(sn,messageContent,offset,end - offset);
			}else{
				throw new MessageFormatErrorException("unknown message type ["+type+"]");
			}
	}
}
